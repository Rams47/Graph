class Solution {
    public int snakesAndLadders(int[][] board) {
         int n = board.length;
        
        Queue<Integer> q = new LinkedList<Integer>();
        q.offer(1);
        
        boolean vis[] = new boolean[n*n+1];
        
        
        for(int move = 0;!q.isEmpty();move++){
            for(int size = q.size();size>0;size--){
                int num = q.poll();
                if(vis[num]) continue;
                    vis[num] = true;
                    if(num == n*n){
                        return move;
                    }
                    for(int i=1;i<=6 && num+i<=n*n;i++){
                        int next = num+i;
                        int value = getBoardValue(board,next);
                        if(value>0)next = value;
                        if(!vis[next]) q.offer(next);
                    
                }
            }
        }
        return -1;
    }
    
    public int getBoardValue(int[][] board,int num){
        int n= board.length;
        int r = (num-1)/n;
        int x = n-1-r;
        int y = r%2 == 0 ? num -1- r*n: n+r*n-num;
        return board[x][y];
    }
}
