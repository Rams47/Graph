import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int N = Integer.parseInt(br.readLine().trim());
            String[] S1 = br.readLine().trim().split(" ");
            String[] S2 = br.readLine().trim().split(" ");
            int[] KnightPos = new int[2];
            int[] TargetPos = new int[2];
            for(int i = 0; i < 2; i++){
                KnightPos[i] = Integer.parseInt(S1[i]);
                TargetPos[i] = Integer.parseInt(S2[i]);
            }
            Solution obj = new Solution();
            int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
            System.out.println(ans);
       }
    }
}
// } Driver Code Ends



class Solution
{
    //Function to find out minimum steps Knight needs to reach target position.
    
    class Node{
        int first;
        int second;
        
        Node(int first,int second){
            this.first = first;
            this.second = second;
        }
    }
    
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    {
        int x = KnightPos[0];
        int y = KnightPos[1];
        
        int tx = TargetPos[0];
        int ty = TargetPos[1];
        
        if(x == tx && y == ty)
           return 0;
        
        int a[][] = new int[1001][1001];
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                a[i][j] = 0;
            }
        }
        
        Queue<Node> q = new LinkedList<Node>();
        q.add(new Node(x-1,y-1));
        
        while(!q.isEmpty()){
            
            int i = q.peek().first;
            int j = q.peek().second;
            q.remove();
            if(i == tx-1 && j == ty-1){
                break;
            }
            
            if((i-1)>=0 && (i-1)<N && (j-2)>=0 && (j-2)<N && a[i-1][j-2] == 0){
                a[i-1][j-2] = a[i][j]+1;
                q.add(new Node(i-1,j-2));
            }
            if((i-2)>=0 && (i-2)<N && (j-1)>=0 && (j-1)<N && a[i-2][j-1] == 0){
                a[i-2][j-1] = a[i][j]+1;
                q.add(new Node(i-2,j-1));
            }
            if((i-2)>=0 && (i-2)<N && (j+1)>=0 && (j+1)<N && a[i-2][j+1] == 0){
                a[i-2][j+1] = a[i][j]+1;
                q.add(new Node(i-2,j+1));
            }
            if((i-1)>=0 && (i-1)<N && (j+2)>=0 && (j+2)<N && a[i-1][j+2] == 0){
                a[i-1][j+2] = a[i][j]+1;
                q.add(new Node(i-1,j+2));
            }
            if((i-1)>=0 && (i-1)<N && (j-2)>=0 && (j-2)<N && a[i-1][j-2] == 0){
                a[i-1][j-2] = a[i][j]+1;
                q.add(new Node(i-1,j-2));
            }
            if((i+1)>=0 && (i+1)<N && (j+2)>=0 && (j+2)<N && a[i+1][j+2] == 0){
                a[i+1][j+2] = a[i][j]+1;
                q.add(new Node(i+1,j+2));
            }
            if((i+2)>=0 && (i+2)<N && (j+1)>=0 && (j+1)<N && a[i+2][j+1] == 0){
                a[i+2][j+1] = a[i][j]+1;
                q.add(new Node(i+2,j+1));
            }
            if((i+2)>=0 && (i+2)<N && (j-1)>=0 && (j-1)<N && a[i+2][j-1] == 0){
                a[i+2][j-1] = a[i][j]+1;
                q.add(new Node(i+2,j-1));
            }
            if((i+1)>=0 && (i+1)<N && (j-2)>=0 && (j-2)<N && a[i+1][j-2] == 0){
                a[i+1][j-2] = a[i][j]+1;
                q.add(new Node(i+1,j-2));
            }
            
        }
        
        return a[tx-1][ty-1];
        
    }
}
